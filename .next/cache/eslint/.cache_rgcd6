[{"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/AppBar.tsx":"1","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/ContentContainer.tsx":"2","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/Footer.tsx":"3","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/NetworkSwitcher.tsx":"4","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/Notification.tsx":"5","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/Pet.tsx":"6","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/RequestAirdrop.tsx":"7","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/SendTransaction.tsx":"8","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/SendVersionedTransaction.tsx":"9","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/SignMessage.tsx":"10","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/Text/index.tsx":"11","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/nav-element/index.tsx":"12","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/contexts/AutoConnectProvider.tsx":"13","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/contexts/ContextProvider.tsx":"14","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/contexts/NetworkConfigurationProvider.tsx":"15","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/hooks/useQueryContext.tsx":"16","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/models/types.ts":"17","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/pages/_app.tsx":"18","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/pages/_document.tsx":"19","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/pages/api/hello.ts":"20","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/pages/basics.tsx":"21","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/pages/index.tsx":"22","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/stores/useNotificationStore.tsx":"23","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/stores/useUserSOLBalanceStore.tsx":"24","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/utils/explorer.ts":"25","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/utils/index.tsx":"26","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/utils/notifications.tsx":"27","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/views/basics/index.tsx":"28","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/views/home/index.tsx":"29","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/views/index.tsx":"30"},{"size":11033,"mtime":1680319043682,"results":"31","hashOfConfig":"32"},{"size":1198,"mtime":1680204203222,"results":"33","hashOfConfig":"32"},{"size":10831,"mtime":1680204203232,"results":"34","hashOfConfig":"32"},{"size":822,"mtime":1680204203232,"results":"35","hashOfConfig":"32"},{"size":4284,"mtime":1680204203232,"results":"36","hashOfConfig":"32"},{"size":8895,"mtime":1680668818182,"results":"37","hashOfConfig":"32"},{"size":2424,"mtime":1680204203232,"results":"38","hashOfConfig":"32"},{"size":3468,"mtime":1680204203232,"results":"39","hashOfConfig":"32"},{"size":3425,"mtime":1680204203232,"results":"40","hashOfConfig":"32"},{"size":2470,"mtime":1680204203232,"results":"41","hashOfConfig":"32"},{"size":1558,"mtime":1680204203232,"results":"42","hashOfConfig":"32"},{"size":1705,"mtime":1680204203232,"results":"43","hashOfConfig":"32"},{"size":962,"mtime":1680204203242,"results":"44","hashOfConfig":"32"},{"size":2754,"mtime":1680204203242,"results":"45","hashOfConfig":"32"},{"size":892,"mtime":1680204203242,"results":"46","hashOfConfig":"32"},{"size":566,"mtime":1680204203242,"results":"47","hashOfConfig":"32"},{"size":62,"mtime":1680204203242,"results":"48","hashOfConfig":"32"},{"size":999,"mtime":1680318990332,"results":"49","hashOfConfig":"32"},{"size":527,"mtime":1680204203242,"results":"50","hashOfConfig":"32"},{"size":307,"mtime":1680204203242,"results":"51","hashOfConfig":"32"},{"size":399,"mtime":1680318985832,"results":"52","hashOfConfig":"32"},{"size":387,"mtime":1680318982472,"results":"53","hashOfConfig":"32"},{"size":420,"mtime":1680204203252,"results":"54","hashOfConfig":"32"},{"size":796,"mtime":1680204203252,"results":"55","hashOfConfig":"32"},{"size":741,"mtime":1680204203252,"results":"56","hashOfConfig":"32"},{"size":909,"mtime":1680204203252,"results":"57","hashOfConfig":"32"},{"size":461,"mtime":1680204203252,"results":"58","hashOfConfig":"32"},{"size":562,"mtime":1680287376985,"results":"59","hashOfConfig":"32"},{"size":4909,"mtime":1680643116218,"results":"60","hashOfConfig":"32"},{"size":74,"mtime":1680204203252,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x0eth3",{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/AppBar.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/ContentContainer.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/Footer.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/NetworkSwitcher.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/Notification.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/Pet.tsx",["125"],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/RequestAirdrop.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/SendTransaction.tsx",["126"],"import { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Keypair, SystemProgram, Transaction, TransactionMessage, TransactionSignature, VersionedTransaction } from '@solana/web3.js';\nimport { FC, useCallback } from 'react';\nimport { notify } from \"../utils/notifications\";\n\nexport const SendTransaction: FC = () => {\n    const { connection } = useConnection();\n    const { publicKey, sendTransaction } = useWallet();\n\n    const onClick = useCallback(async () => {\n        if (!publicKey) {\n            notify({ type: 'error', message: `Wallet not connected!` });\n            console.log('error', `Send Transaction: Wallet not connected!`);\n            return;\n        }\n\n        let signature: TransactionSignature = '';\n        try {\n\n            // Create instructions to send, in this case a simple transfer\n            const instructions = [\n                SystemProgram.transfer({\n                    fromPubkey: publicKey,\n                    toPubkey: Keypair.generate().publicKey,\n                    lamports: 1_000_000,\n                }),\n            ];\n\n            // Get the lates block hash to use on our transaction and confirmation\n            let latestBlockhash = await connection.getLatestBlockhash()\n\n            // Create a new TransactionMessage with version and compile it to legacy\n            const messageLegacy = new TransactionMessage({\n                payerKey: publicKey,\n                recentBlockhash: latestBlockhash.blockhash,\n                instructions,\n            }).compileToLegacyMessage();\n\n            // Create a new VersionedTransacction which supports legacy and v0\n            const transation = new VersionedTransaction(messageLegacy)\n\n            // Send transaction and await for signature\n            signature = await sendTransaction(transation, connection);\n\n            // Send transaction and await for signature\n            await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed');\n\n            console.log(signature);\n            notify({ type: 'success', message: 'Transaction successful!', txid: signature });\n        } catch (error: any) {\n            notify({ type: 'error', message: `Transaction failed!`, description: error?.message, txid: signature });\n            console.log('error', `Transaction failed! ${error?.message}`, signature);\n            return;\n        }\n    }, [publicKey, notify, connection, sendTransaction]);\n\n    return (\n        <div className=\"flex flex-row justify-center\">\n            <div className=\"relative group items-center\">\n                <div className=\"m-1 absolute -inset-0.5 bg-gradient-to-r from-indigo-500 to-fuchsia-500 \n                rounded-lg blur opacity-20 group-hover:opacity-100 transition duration-1000 group-hover:duration-200 animate-tilt\"></div>\n                    <button\n                        className=\"group w-60 m-2 btn animate-pulse bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black\"\n                        onClick={onClick} disabled={!publicKey}\n                    >\n                        <div className=\"hidden group-disabled:block \">\n                        Wallet not connected\n                        </div>\n                         <span className=\"block group-disabled:hidden\" >\n                            Send Transaction\n                        </span>\n                    </button>\n             </div>\n        </div>\n    );\n};\n","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/SendVersionedTransaction.tsx",["127"],"import { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Keypair, SystemProgram, TransactionMessage, TransactionSignature, VersionedTransaction } from '@solana/web3.js';\nimport { FC, useCallback } from 'react';\nimport { notify } from \"../utils/notifications\";\n\nexport const SendVersionedTransaction: FC = () => {\n    const { connection } = useConnection();\n    const { publicKey, sendTransaction } = useWallet();\n\n    const onClick = useCallback(async () => {\n        if (!publicKey) {\n            notify({ type: 'error', message: `Wallet not connected!` });\n            console.log('error', `Send Transaction: Wallet not connected!`);\n            return;\n        }\n\n        let signature: TransactionSignature = '';\n        try {\n\n            // Create instructions to send, in this case a simple transfer\n            const instructions = [\n                SystemProgram.transfer({\n                    fromPubkey: publicKey,\n                    toPubkey: Keypair.generate().publicKey,\n                    lamports: 1_000_000,\n                }),\n            ];\n\n            // Get the lates block hash to use on our transaction and confirmation\n            let latestBlockhash = await connection.getLatestBlockhash()\n\n            // Create a new TransactionMessage with version and compile it to version 0\n            const messageV0 = new TransactionMessage({\n                payerKey: publicKey,\n                recentBlockhash: latestBlockhash.blockhash,\n                instructions,\n            }).compileToV0Message();\n\n            // Create a new VersionedTransacction to support the v0 message\n            const transation = new VersionedTransaction(messageV0)\n\n            // Send transaction and await for signature\n            signature = await sendTransaction(transation, connection);\n\n            // Await for confirmation\n            await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed');\n\n            console.log(signature);\n            notify({ type: 'success', message: 'Transaction successful!', txid: signature });\n        } catch (error: any) {\n            notify({ type: 'error', message: `Transaction failed!`, description: error?.message, txid: signature });\n            console.log('error', `Transaction failed! ${error?.message}`, signature);\n            return;\n        }\n    }, [publicKey, notify, connection, sendTransaction]);\n\n    return (\n        <div className=\"flex flex-row justify-center\">\n            <div className=\"relative group items-center\">\n                <div className=\"m-1 absolute -inset-0.5 bg-gradient-to-r from-indigo-500 to-fuchsia-500 \n                rounded-lg blur opacity-20 group-hover:opacity-100 transition duration-1000 group-hover:duration-200 animate-tilt\"></div>\n                    <button\n                        className=\"group w-60 m-2 btn animate-pulse bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black\"\n                        onClick={onClick} disabled={!publicKey}\n                        >\n                    <div className=\"hidden group-disabled:block \">\n                        Wallet not connected\n                    </div>\n                    <span className=\"block group-disabled:hidden\" >\n                        Send Versioned Transaction\n                    </span>\n                    </button>\n            </div>\n        </div>\n    );\n};","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/SignMessage.tsx",["128"],"// TODO: SignMessage\nimport { verify } from '@noble/ed25519';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport bs58 from 'bs58';\nimport { FC, useCallback } from 'react';\nimport { notify } from \"../utils/notifications\";\n\nexport const SignMessage: FC = () => {\n    const { publicKey, signMessage } = useWallet();\n\n    const onClick = useCallback(async () => {\n        try {\n            // `publicKey` will be null if the wallet isn't connected\n            if (!publicKey) throw new Error('Wallet not connected!');\n            // `signMessage` will be undefined if the wallet doesn't support it\n            if (!signMessage) throw new Error('Wallet does not support message signing!');\n            // Encode anything as bytes\n            const message = new TextEncoder().encode('Hello, world!');\n            // Sign the bytes using the wallet\n            const signature = await signMessage(message);\n            // Verify that the bytes were signed using the private key that matches the known public key\n            if (!verify(signature, message, publicKey.toBytes())) throw new Error('Invalid signature!');\n            notify({ type: 'success', message: 'Sign message successful!', txid: bs58.encode(signature) });\n        } catch (error: any) {\n            notify({ type: 'error', message: `Sign Message failed!`, description: error?.message });\n            console.log('error', `Sign Message failed! ${error?.message}`);\n        }\n    }, [publicKey, notify, signMessage]);\n\n    return (\n        <div className=\"flex flex-row justify-center\">\n            <div className=\"relative group items-center\">\n                <div className=\"m-1 absolute -inset-0.5 bg-gradient-to-r from-indigo-500 to-fuchsia-500 \n                rounded-lg blur opacity-20 group-hover:opacity-100 transition duration-1000 group-hover:duration-200 animate-tilt\"></div>\n                <button\n                    className=\"group w-60 m-2 btn animate-pulse bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black\"\n                    onClick={onClick} disabled={!publicKey}\n                >\n                    <div className=\"hidden group-disabled:block\">\n                        Wallet not connected\n                    </div>\n                    <span className=\"block group-disabled:hidden\" > \n                        Sign Message \n                    </span>\n                </button>\n            </div>\n        </div>\n    );\n};\n","/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/Text/index.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/components/nav-element/index.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/contexts/AutoConnectProvider.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/contexts/ContextProvider.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/contexts/NetworkConfigurationProvider.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/hooks/useQueryContext.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/models/types.ts",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/pages/_app.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/pages/_document.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/pages/api/hello.ts",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/pages/basics.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/pages/index.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/stores/useNotificationStore.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/stores/useUserSOLBalanceStore.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/utils/explorer.ts",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/utils/index.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/utils/notifications.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/views/basics/index.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/views/home/index.tsx",[],"/home/beliv/lesson/FinalTaskFrontEnd/dapp-scaffold/src/views/index.tsx",[],{"ruleId":"129","severity":1,"message":"130","line":179,"column":20,"nodeType":"131","endLine":179,"endColumn":87},{"ruleId":"132","severity":1,"message":"133","line":55,"column":8,"nodeType":"134","endLine":55,"endColumn":56,"suggestions":"135"},{"ruleId":"132","severity":1,"message":"133","line":55,"column":8,"nodeType":"134","endLine":55,"endColumn":56,"suggestions":"136"},{"ruleId":"132","severity":1,"message":"133","line":28,"column":8,"nodeType":"134","endLine":28,"endColumn":40,"suggestions":"137"},"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Use `<Image />` from `next/image` instead to utilize Image Optimization. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'notify'. Either exclude it or remove the dependency array. Outer scope values like 'notify' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["138"],["139"],["140"],{"desc":"141","fix":"142"},{"desc":"141","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [publicKey, connection, sendTransaction]",{"range":"146","text":"147"},{"range":"148","text":"147"},"Update the dependencies array to be: [publicKey, signMessage]",{"range":"149","text":"150"},[2395,2443],"[publicKey, connection, sendTransaction]",[2361,2409],[1458,1490],"[publicKey, signMessage]"]